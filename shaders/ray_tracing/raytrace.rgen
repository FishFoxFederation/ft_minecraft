#version 460
#extension GL_EXT_ray_tracing : require

layout(set = 0, binding = 0, rgba32f) uniform image2D lighting_image;
layout(set = 0, binding = 1, rgba32f) uniform image2D shadow_image;
layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 2, binding = 0) uniform Camera
{
	mat4 view;
	mat4 proj;
} camera;

layout(location = 0) rayPayloadEXT struct RayPayload
{
	vec3 ray_direction;
	vec4 color;
} payload;

void main()
{
	const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixel_center / vec2(imageSize(lighting_image));
	const vec2 d = inUV * 2.0 - 1.0;

	const mat4 inv_view = inverse(camera.view);
	const mat4 inv_proj = inverse(camera.proj);

	vec4 origin = inv_view * vec4(0, 0, 0, 1);
	vec4 target = inv_proj * vec4(d.x, d.y, 1, 1);
	vec4 direction = inv_view * vec4(normalize(target.xyz), 0);

	uint  rayFlags = gl_RayFlagsOpaqueEXT;
	float tMin = 0.001;
	float tMax = 1000.0;

	payload.ray_direction = direction.xyz;

	traceRayEXT(
		topLevelAS,		// acceleration structure
		rayFlags,		// rayFlags
		0xFF,			// cullMask
		0,				// sbtRecordOffset
		0,				// sbtRecordStride
		0,				// missIndex
		origin.xyz,		// ray origin
		tMin,			// ray min range
		direction.xyz,	// ray direction
		tMax,			// ray max range
		0				// payload (location = 0)
	);


	imageStore(lighting_image, ivec2(gl_LaunchIDEXT.xy), payload.color);
}
